class WeightedGraph:
    def __init__(self):
        self.cityList = {}

    def printGraph(self):
        # Iterasi setiap kota
        for kota in self.cityList:
            # Menampilkan nama kota
            print(kota, ":", self.cityList[kota])

            # Menampilkan jarak ke kota tetangga
            for tetangga, jarak in self.cityList[kota].items():
                # Menampilkan tetangga dan jarak
                print("    ->", tetangga, ":", jarak, "km")

    def tambahkanKota(self, kota):
        if kota not in self.cityList:
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        if kotaDihapus in self.cityList:
            # Hapus kota dari daftar kota
            del self.cityList[kotaDihapus]
            # Hapus referensi ke kota yang dihapus dari kota lain
            for kota in self.cityList:
                if kotaDihapus in self.cityList[kota]:
                    del self.cityList[kota][kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

    def dijkstra(self, sumber):
        # Inisialisasi jarak dengan nilai yang besar
        max_jarak = float('inf')
        jarak = {kota: max_jarak for kota in self.cityList}

        jarak[sumber] = 0

        # Inisialisasi daftar kota yang belum dikunjungi
        kota_belum_dikunjungi = list(self.cityList.keys())

         while kota_belum_dikunjungi:
            # Cari kota yang belum dikunjungi dengan jarak terkecil
            min_jarak = max_jarak
            kota_terdekat = None
            for kota in kota_belum_dikunjungi:
                if jarak[kota] < min_jarak:
                    min_jarak = jarak[kota]
                    kota_terdekat = kota

            # Hapus kota terdekat dari daftar belum dikunjungi
            kota_belum_dikunjungi.remove(kota_terdekat)

            # Perbarui jarak ke kota tetangga
            for tetangga, berat in self.cityList[kota_terdekat].items():
                jarak_baru = jarak[kota_terdekat] + berat
                if jarak_baru < jarak[tetangga]:
                    jarak[tetangga] = jarak_baru

        return jarak


# Contoh penggunaan dengan algoritma Dijkstra:
peta_jepang = WeightedGraph()
peta_jepang.tambahkanKota("Tokyo")
peta_jepang.tambahkanKota("Okayama")
peta_jepang.tambahkanKota("Oita")
peta_jepang.tambahkanKota("Kitakyushu")
peta_jepang.tambahkanKota("Matsuyama")
peta_jepang.tambahkanKota("Osaka")
peta_jepang.tambahkanKota("Nagoya")
peta_jepang.tambahkanKota("Hamamatsu")
peta_jepang.tambahkanKota("Nagano")
peta_jepang.tambahkanKota("Kanazawa")


